package com.hyser.hysercore.abilities;

import com.hyser.hysercore.HyserCore;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class AbilityCommand implements CommandExecutor, TabCompleter {
    private final HyserCore plugin;
    private final AbilityManager abilityManager;
    
    public AbilityCommand(HyserCore plugin, AbilityManager abilityManager) {
        this.plugin = plugin;
        this.abilityManager = abilityManager;
    }
    
    @Override\n    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        String prefix = abilityManager.getPrefix();\n        \n        if (args.length == 0) {\n            sender.sendMessage(prefix + ChatColor.YELLOW + \"Comandos de Abilities:\");\n            sender.sendMessage(ChatColor.GRAY + \"  /abilities list - Listar todas las abilities\");\n            sender.sendMessage(ChatColor.GRAY + \"  /abilities info <ability> - Información de una ability\");\n            sender.sendMessage(ChatColor.GRAY + \"  /abilities reload - Recargar configuración\");\n            return true;\n        }\n        \n        String subcommand = args[0].toLowerCase();\n        \n        switch (subcommand) {\n            case \"list\":\n                return handleListCommand(sender, prefix);\n                \n            case \"info\":\n                if (args.length < 2) {\n                    sender.sendMessage(prefix + ChatColor.RED + \"Uso: /abilities info <ability>\");\n                    return true;\n                }\n                return handleInfoCommand(sender, args[1], prefix);\n                \n            case \"reload\":\n                return handleReloadCommand(sender, prefix);\n                \n            default:\n                sender.sendMessage(prefix + ChatColor.RED + \"Subcomando desconocido: \" + subcommand);\n                return true;\n        }\n    }\n    \n    private boolean handleListCommand(CommandSender sender, String prefix) {\n        if (abilityManager.getAbilities().isEmpty()) {\n            sender.sendMessage(prefix + ChatColor.YELLOW + \"No hay abilities cargadas.\");\n            return true;\n        }\n        \n        sender.sendMessage(prefix + ChatColor.YELLOW + \"Abilities disponibles:\");\n        \n        for (Ability ability : abilityManager.getAbilities().values()) {\n            String status = ability.isEnabled() ? \n                ChatColor.GREEN + \"✓\" : ChatColor.RED + \"✗\";\n            \n            sender.sendMessage(ChatColor.GRAY + \"  \" + status + \" \" + \n                ChatColor.WHITE + ability.getId() + \n                ChatColor.GRAY + \" - \" + ability.getName());\n        }\n        \n        return true;\n    }\n    \n    private boolean handleInfoCommand(CommandSender sender, String abilityId, String prefix) {\n        Ability ability = abilityManager.getAbility(abilityId);\n        \n        if (ability == null) {\n            sender.sendMessage(prefix + ChatColor.RED + \"Ability '\" + abilityId + \"' no encontrada.\");\n            return true;\n        }\n        \n        sender.sendMessage(prefix + ChatColor.YELLOW + \"Información de: \" + ability.getName());\n        sender.sendMessage(ChatColor.GRAY + \"ID: \" + ChatColor.WHITE + ability.getId());\n        sender.sendMessage(ChatColor.GRAY + \"Descripción: \" + ability.getDescription());\n        sender.sendMessage(ChatColor.GRAY + \"Permiso: \" + ChatColor.WHITE + ability.getPermission());\n        sender.sendMessage(ChatColor.GRAY + \"Cooldown: \" + ChatColor.WHITE + ability.getCooldown() + \"s\");\n        sender.sendMessage(ChatColor.GRAY + \"Estado: \" + \n            (ability.isEnabled() ? ChatColor.GREEN + \"Activa\" : ChatColor.RED + \"Desactivada\"));\n        \n        if (ability.getTriggers() != null && !ability.getTriggers().isEmpty()) {\n            sender.sendMessage(ChatColor.GRAY + \"Triggers: \" + ChatColor.WHITE + ability.getTriggers().size());\n        }\n        \n        if (ability.getActions() != null && !ability.getActions().isEmpty()) {\n            sender.sendMessage(ChatColor.GRAY + \"Acciones: \" + ChatColor.WHITE + ability.getActions().size());\n        }\n        \n        return true;\n    }\n    \n    private boolean handleReloadCommand(CommandSender sender, String prefix) {\n        if (!sender.hasPermission(\"hysercore.admin\")) {\n            sender.sendMessage(prefix + ChatColor.RED + \"No tienes permisos para recargar abilities.\");\n            return true;\n        }\n        \n        try {\n            abilityManager.reload();\n            sender.sendMessage(prefix + ChatColor.GREEN + \"Sistema de abilities recargado exitosamente.\");\n            sender.sendMessage(prefix + ChatColor.GRAY + \"Abilities cargadas: \" + \n                abilityManager.getAbilities().size());\n        } catch (Exception e) {\n            sender.sendMessage(prefix + ChatColor.RED + \"Error al recargar abilities: \" + e.getMessage());\n        }\n        \n        return true;\n    }\n    \n    @Override\n    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {\n        List<String> completions = new ArrayList<>();\n        \n        if (args.length == 1) {\n            // Subcomandos principales\n            List<String> subcommands = Arrays.asList(\"list\", \"info\", \"reload\");\n            for (String sub : subcommands) {\n                if (sub.toLowerCase().startsWith(args[0].toLowerCase())) {\n                    completions.add(sub);\n                }\n            }\n        } else if (args.length == 2 && \"info\".equalsIgnoreCase(args[0])) {\n            // IDs de abilities para el comando info\n            for (String abilityId : abilityManager.getAbilities().keySet()) {\n                if (abilityId.toLowerCase().startsWith(args[1].toLowerCase())) {\n                    completions.add(abilityId);\n                }\n            }\n        }\n        \n        return completions;\n    }\n}"